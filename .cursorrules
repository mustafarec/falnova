# FalNova Cursor Kuralları

## 📱 Genel Kurallar

1. Her dosya UTF-8 ile kodlanmalı
2. Her dosya newline ile bitmeli
3. Satır uzunluğu maksimum 80 karakter olmalı
4. Girintiler 2 boşluk kullanmalı
5. Trailing whitespace olmamalı

## 🎨 Kod Stili

### Dart/Flutter
- const constructor kullanımı zorunlu
- final değişkenler tercih edilmeli
- Tek satırlık fonksiyonlarda => kullanılmalı
- Trailing comma kullanılmalı
- Freezed için @freezed annotation kullanılmalı
- JsonSerializable için snake_case kullanılmalı

### Riverpod
- @riverpod annotation kullanılmalı
- StateProvider yerine AsyncNotifierProvider tercih edilmeli
- ref.watch yerine ref.listen kullanılmalı
- Asenkron işlemlerde AsyncValue kullanılmalı

### Dosya Yapısı
- lib/
  ├── ui/
  │   ├── screens/
  │   ├── widgets/
  │   ├── theme/
  │   └── utils/
  │
  ├── backend/
  │   ├── models/
  │   ├── repositories/
  │   ├── services/
  │   └── utils/
  │
  ├── core/
  │   ├── config/
  │   ├── constants/
  │   └── extensions/
  │
  └── features/
      ├── auth/
      ├── fortune/
      ├── horoscope/
      └── payment/

## 🔍 Kod İnceleme
1. Linter kuralları kontrol edilmeli
2. Test coverage %80'in üzerinde olmalı
3. Performans metrikleri kontrol edilmeli
4. Bellek sızıntıları kontrol edilmeli

## 🚀 Derleme ve Test
1. Her PR öncesi testler çalıştırılmalı
2. build_runner build --delete-conflicting-outputs çalıştırılmalı
3. Flutter analyze temiz olmalı
4. Flutter test başarılı olmalı

## 📝 Dokümantasyon
1. Tüm public API'ler dokümante edilmeli
2. README.md güncel tutulmalı
3. CHANGELOG.md düzenli güncellenmeli
4. Progress.md takip edilmeli

## 🔒 Güvenlik
1. API anahtarları .env dosyasında saklanmalı
2. Hassas veriler şifrelenmeli
3. Kullanıcı verileri güvenli şekilde saklanmalı
4. Firebase güvenlik kuralları kontrol edilmeli

## 🎯 Performans
1. Gereksiz build'ler önlenmeli
2. Büyük asset'ler optimize edilmeli
3. Lazy loading kullanılmalı
4. Cache mekanizması implement edilmeli

## 🌐 Ağ İstekleri
1. Timeout değerleri ayarlanmalı
2. Retry mekanizması implement edilmeli
3. Offline mod desteklenmeli
4. API hataları düzgün yönetilmeli

## 📱 UI/UX
1. Material 3 guideline takip edilmeli
2. Dark/Light tema desteklenmeli
3. Responsive tasarım uygulanmalı
4. Accessibility desteklenmeli

## 🔄 State Management
1. Riverpod kullanılmalı
2. AsyncValue ile hata yönetimi yapılmalı
3. Provider scope optimize edilmeli
4. State immutable olmalı

## 📦 Paket Yönetimi
1. Paket versiyonları sabitlenmeli
2. Kullanılmayan paketler kaldırılmalı
3. Paket güvenlik açıkları kontrol edilmeli
4. Paket boyutları optimize edilmeli

## 🧪 Test
1. Unit testler yazılmalı
2. Widget testleri yazılmalı
3. Integration testler yazılmalı
4. Golden testler kullanılmalı

## 🚀 CI/CD
1. GitHub Actions kullanılmalı
2. Otomatik versiyon artırımı yapılmalı
3. Otomatik release notes oluşturulmalı
4. Test coverage raporlanmalı

## 📈 Analytics
1. Firebase Analytics kullanılmalı
2. Crashlytics implement edilmeli
3. Performance monitoring yapılmalı
4. User engagement takip edilmeli

## 🌍 Lokalizasyon
1. easy_localization kullanılmalı
2. Tüm stringler lokalize edilmeli
3. RTL desteği sağlanmalı
4. Tarih/saat formatları lokalize edilmeli

## 🎨 Asset Yönetimi
1. SVG tercih edilmeli
2. Asset boyutları optimize edilmeli
3. Font boyutları minimize edilmeli
4. Image caching implement edilmeli

## 🔐 Yetkilendirme
1. Firebase Auth kullanılmalı
2. Rol bazlı yetkilendirme yapılmalı
3. Token yönetimi implement edilmeli
4. Oturum güvenliği sağlanmalı

## 💾 Veri Saklama
1. Supabase kullanılmalı
2. Offline storage implement edilmeli
3. Cache stratejisi belirlenmeli
4. Veri şifreleme uygulanmalı

## 🚦 Hata Yönetimi
1. Custom error handler kullanılmalı
2. Hata mesajları lokalize edilmeli
3. Retry mekanizması implement edilmeli
4. Graceful degradation uygulanmalı

## 📱 Platform Spesifik
1. iOS ve Android için ayrı konfigürasyon
2. Platform spesifik UI elementleri
3. Platform kısıtlamaları gözetilmeli
4. Store guideline'ları takip edilmeli 